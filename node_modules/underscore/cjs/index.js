Object.defineProperty(exports, '__esModule', { value: true });

var _setup = require('underscore/cjs/_setup.js');
var restArguments = require('underscore/cjs/restArguments.js');
var isObject = require('underscore/cjs/isObject.js');
var isNull = require('underscore/cjs/isNull.js');
var isUndefined = require('underscore/cjs/isUndefined.js');
var isBoolean = require('underscore/cjs/isBoolean.js');
var isElement = require('underscore/cjs/isElement.js');
var isString = require('underscore/cjs/isString.js');
var isNumber = require('underscore/cjs/isNumber.js');
var isDate = require('underscore/cjs/isDate.js');
var isRegExp = require('underscore/cjs/isRegExp.js');
var isError = require('underscore/cjs/isError.js');
var isSymbol = require('underscore/cjs/isSymbol.js');
var isArrayBuffer = require('underscore/cjs/isArrayBuffer.js');
var isDataView = require('underscore/cjs/isDataView.js');
var isArray = require('underscore/cjs/isArray.js');
var isFunction = require('underscore/cjs/isFunction.js');
var isArguments = require('underscore/cjs/isArguments.js');
var _isFinite = require('underscore/cjs/isFinite.js');
var _isNaN = require('underscore/cjs/isNaN.js');
var isTypedArray = require('underscore/cjs/isTypedArray.js');
var isEmpty = require('underscore/cjs/isEmpty.js');
var isMatch = require('underscore/cjs/isMatch.js');
var isEqual = require('underscore/cjs/isEqual.js');
var isMap = require('underscore/cjs/isMap.js');
var isWeakMap = require('underscore/cjs/isWeakMap.js');
var isSet = require('underscore/cjs/isSet.js');
var isWeakSet = require('underscore/cjs/isWeakSet.js');
var keys = require('underscore/cjs/keys.js');
var allKeys = require('underscore/cjs/allKeys.js');
var values = require('underscore/cjs/values.js');
var pairs = require('underscore/cjs/pairs.js');
var invert = require('underscore/cjs/invert.js');
var functions = require('underscore/cjs/functions.js');
var extend = require('underscore/cjs/extend.js');
var extendOwn = require('underscore/cjs/extendOwn.js');
var defaults = require('underscore/cjs/defaults.js');
var create = require('underscore/cjs/create.js');
var clone = require('underscore/cjs/clone.js');
var tap = require('underscore/cjs/tap.js');
var get = require('underscore/cjs/get.js');
var has = require('underscore/cjs/has.js');
var mapObject = require('underscore/cjs/mapObject.js');
var identity = require('underscore/cjs/identity.js');
var constant = require('underscore/cjs/constant.js');
var noop = require('underscore/cjs/noop.js');
var toPath = require('underscore/cjs/toPath.js');
var property = require('underscore/cjs/property.js');
var propertyOf = require('underscore/cjs/propertyOf.js');
var matcher = require('underscore/cjs/matcher.js');
var times = require('underscore/cjs/times.js');
var random = require('underscore/cjs/random.js');
var now = require('underscore/cjs/now.js');
var _escape = require('underscore/cjs/escape.js');
var _unescape = require('underscore/cjs/unescape.js');
var templateSettings = require('underscore/cjs/templateSettings.js');
var template = require('underscore/cjs/template.js');
var result = require('underscore/cjs/result.js');
var uniqueId = require('underscore/cjs/uniqueId.js');
var chain = require('underscore/cjs/chain.js');
var iteratee = require('underscore/cjs/iteratee.js');
var partial = require('underscore/cjs/partial.js');
var bind = require('underscore/cjs/bind.js');
var bindAll = require('underscore/cjs/bindAll.js');
var memoize = require('underscore/cjs/memoize.js');
var delay = require('underscore/cjs/delay.js');
var defer = require('underscore/cjs/defer.js');
var throttle = require('underscore/cjs/throttle.js');
var debounce = require('underscore/cjs/debounce.js');
var wrap = require('underscore/cjs/wrap.js');
var negate = require('underscore/cjs/negate.js');
var compose = require('underscore/cjs/compose.js');
var after = require('underscore/cjs/after.js');
var before = require('underscore/cjs/before.js');
var once = require('underscore/cjs/once.js');
var findKey = require('underscore/cjs/findKey.js');
var findIndex = require('underscore/cjs/findIndex.js');
var findLastIndex = require('underscore/cjs/findLastIndex.js');
var sortedIndex = require('underscore/cjs/sortedIndex.js');
var indexOf = require('underscore/cjs/indexOf.js');
var lastIndexOf = require('underscore/cjs/lastIndexOf.js');
var find = require('underscore/cjs/find.js');
var findWhere = require('underscore/cjs/findWhere.js');
var each = require('underscore/cjs/each.js');
var map = require('underscore/cjs/map.js');
var reduce = require('underscore/cjs/reduce.js');
var reduceRight = require('underscore/cjs/reduceRight.js');
var filter = require('underscore/cjs/filter.js');
var reject = require('underscore/cjs/reject.js');
var every = require('underscore/cjs/every.js');
var some = require('underscore/cjs/some.js');
var contains = require('underscore/cjs/contains.js');
var invoke = require('underscore/cjs/invoke.js');
var pluck = require('underscore/cjs/pluck.js');
var where = require('underscore/cjs/where.js');
var max = require('underscore/cjs/max.js');
var min = require('underscore/cjs/min.js');
var shuffle = require('underscore/cjs/shuffle.js');
var sample = require('underscore/cjs/sample.js');
var sortBy = require('underscore/cjs/sortBy.js');
var groupBy = require('underscore/cjs/groupBy.js');
var indexBy = require('underscore/cjs/indexBy.js');
var countBy = require('underscore/cjs/countBy.js');
var partition = require('underscore/cjs/partition.js');
var toArray = require('underscore/cjs/toArray.js');
var size = require('underscore/cjs/size.js');
var pick = require('underscore/cjs/pick.js');
var omit = require('underscore/cjs/omit.js');
var first = require('underscore/cjs/first.js');
var initial = require('underscore/cjs/initial.js');
var last = require('underscore/cjs/last.js');
var rest = require('underscore/cjs/rest.js');
var compact = require('underscore/cjs/compact.js');
var flatten = require('underscore/cjs/flatten.js');
var without = require('underscore/cjs/without.js');
var uniq = require('underscore/cjs/uniq.js');
var union = require('underscore/cjs/union.js');
var intersection = require('underscore/cjs/intersection.js');
var difference = require('underscore/cjs/difference.js');
var unzip = require('underscore/cjs/unzip.js');
var zip = require('underscore/cjs/zip.js');
var object = require('underscore/cjs/object.js');
var range = require('underscore/cjs/range.js');
var chunk = require('underscore/cjs/chunk.js');
var mixin = require('underscore/cjs/mixin.js');
require('underscore/cjs/underscore-array-methods.js');
var underscore = require('underscore/cjs/underscore.js');

// Named Exports

exports.VERSION = _setup.VERSION;
exports.restArguments = restArguments;
exports.isObject = isObject;
exports.isNull = isNull;
exports.isUndefined = isUndefined;
exports.isBoolean = isBoolean;
exports.isElement = isElement;
exports.isString = isString;
exports.isNumber = isNumber;
exports.isDate = isDate;
exports.isRegExp = isRegExp;
exports.isError = isError;
exports.isSymbol = isSymbol;
exports.isArrayBuffer = isArrayBuffer;
exports.isDataView = isDataView;
exports.isArray = isArray;
exports.isFunction = isFunction;
exports.isArguments = isArguments;
exports.isFinite = _isFinite;
exports.isNaN = _isNaN;
exports.isTypedArray = isTypedArray;
exports.isEmpty = isEmpty;
exports.isMatch = isMatch;
exports.isEqual = isEqual;
exports.isMap = isMap;
exports.isWeakMap = isWeakMap;
exports.isSet = isSet;
exports.isWeakSet = isWeakSet;
exports.keys = keys;
exports.allKeys = allKeys;
exports.values = values;
exports.pairs = pairs;
exports.invert = invert;
exports.functions = functions;
exports.methods = functions;
exports.extend = extend;
exports.assign = extendOwn;
exports.extendOwn = extendOwn;
exports.defaults = defaults;
exports.create = create;
exports.clone = clone;
exports.tap = tap;
exports.get = get;
exports.has = has;
exports.mapObject = mapObject;
exports.identity = identity;
exports.constant = constant;
exports.noop = noop;
exports.toPath = toPath;
exports.property = property;
exports.propertyOf = propertyOf;
exports.matcher = matcher;
exports.matches = matcher;
exports.times = times;
exports.random = random;
exports.now = now;
exports.escape = _escape;
exports.unescape = _unescape;
exports.templateSettings = templateSettings;
exports.template = template;
exports.result = result;
exports.uniqueId = uniqueId;
exports.chain = chain;
exports.iteratee = iteratee;
exports.partial = partial;
exports.bind = bind;
exports.bindAll = bindAll;
exports.memoize = memoize;
exports.delay = delay;
exports.defer = defer;
exports.throttle = throttle;
exports.debounce = debounce;
exports.wrap = wrap;
exports.negate = negate;
exports.compose = compose;
exports.after = after;
exports.before = before;
exports.once = once;
exports.findKey = findKey;
exports.findIndex = findIndex;
exports.findLastIndex = findLastIndex;
exports.sortedIndex = sortedIndex;
exports.indexOf = indexOf;
exports.lastIndexOf = lastIndexOf;
exports.detect = find;
exports.find = find;
exports.findWhere = findWhere;
exports.each = each;
exports.forEach = each;
exports.collect = map;
exports.map = map;
exports.foldl = reduce;
exports.inject = reduce;
exports.reduce = reduce;
exports.foldr = reduceRight;
exports.reduceRight = reduceRight;
exports.filter = filter;
exports.select = filter;
exports.reject = reject;
exports.all = every;
exports.every = every;
exports.any = some;
exports.some = some;
exports.contains = contains;
exports.include = contains;
exports.includes = contains;
exports.invoke = invoke;
exports.pluck = pluck;
exports.where = where;
exports.max = max;
exports.min = min;
exports.shuffle = shuffle;
exports.sample = sample;
exports.sortBy = sortBy;
exports.groupBy = groupBy;
exports.indexBy = indexBy;
exports.countBy = countBy;
exports.partition = partition;
exports.toArray = toArray;
exports.size = size;
exports.pick = pick;
exports.omit = omit;
exports.first = first;
exports.head = first;
exports.take = first;
exports.initial = initial;
exports.last = last;
exports.drop = rest;
exports.rest = rest;
exports.tail = rest;
exports.compact = compact;
exports.flatten = flatten;
exports.without = without;
exports.uniq = uniq;
exports.unique = uniq;
exports.union = union;
exports.intersection = intersection;
exports.difference = difference;
exports.transpose = unzip;
exports.unzip = unzip;
exports.zip = zip;
exports.object = object;
exports.range = range;
exports.chunk = chunk;
exports.mixin = mixin;
exports.default = underscore;
